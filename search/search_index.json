{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"LynxKite 2000:MM","text":"<p>LynxKite 2000:MM is a GPU-accelerated data science platform and a general tool for collaboratively edited workflows.</p> <p>Features include:</p> <ul> <li>A web UI for building and executing data science workflows.</li> <li>An extensive toolbox of graph analytics operations powered by NVIDIA RAPIDS (CUDA).</li> <li>An integrated collaborative code editor makes it easy to add new operations.</li> <li>An environment for visually designing neural network model architectures.</li> <li>The infrastructure for easily creating other workflow design environments. See <code>lynxkite-pillow-example</code> for a simple example.</li> </ul> <p>This is the next evolution of the classical LynxKite. The two tools offer similar functionality, but are not compatible. This version runs on GPU clusters instead of Hadoop clusters. It targets CUDA instead of Apache Spark. It is much more extensible.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install lynxkite lynxkite-graph-analytics\n</code></pre>"},{"location":"#getting-started","title":"Getting started","text":"<ul> <li>Online demo</li> <li>Quickstart</li> <li>Contributing</li> </ul>"},{"location":"#license","title":"License","text":"<p>LynxKite 2000:MM is licensed under the GNU AGPLv3. See the LICENSE file for details.</p> <p>Lynx Analytics offers a commercial license of LynxKite 2000:MM that includes additional features and support. Get in touch if you are interested in life sciences tools and cluster deployment!</p>"},{"location":"contributing/","title":"Contributing","text":"<p>The LynxKite 2000:MM repository lives at https://github.com/lynxkite/lynxkite-2000. Bug reports, feature requests, and pull requests are welcome!</p>"},{"location":"contributing/#project-structure","title":"Project structure","text":"<ul> <li><code>lynxkite-core</code>: Core types and utilities. Depend on this lightweight package if you are writing LynxKite plugins.</li> <li><code>lynxkite-app</code>: The LynxKite web application. Install some plugins then run this to use LynxKite.</li> <li><code>lynxkite-graph-analytics</code>: Graph analytics plugin. The classical LynxKite experience!</li> <li><code>lynxkite-pillow</code>: A simple example plugin.</li> <li><code>docs</code>: User-facing documentation. It's shared between all packages.</li> </ul>"},{"location":"contributing/#development-setup","title":"Development setup","text":"<p>Install everything like this:</p> <pre><code>uv venv\nsource .venv/bin/activate\nuvx pre-commit install\nuv sync\n</code></pre> <p>This also builds the frontend, hopefully very quickly. To run it:</p> <pre><code>cd examples\nlynxkite\n</code></pre> <p>If you also want to make changes to the frontend with hot reloading:</p> <pre><code>cd lynxkite-app/web\nnpm run dev\n</code></pre>"},{"location":"contributing/#executing-tests","title":"Executing tests","text":"<pre><code>pytest                                # Runs all backend unit tests.\npytest lynxkite-core                  # Runs tests for one package.\ncd lynxkite-app/web &amp;&amp; npm run test   # Runs frontend tests.\n</code></pre>"},{"location":"contributing/#documentation","title":"Documentation","text":"<p>To work on the documentation:</p> <pre><code>mkdocs serve\n</code></pre>"},{"location":"license/","title":"License","text":"<p>LynxKite 2000:MM is available under the GNU AGPLv3 license below.</p> <p>Additionally, Lynx Analytics offers a commercial license of LynxKite 2000:MM that includes additional features and support. Get in touch if you are interested in life sciences tools and cluster deployment!</p> <pre><code>                    GNU AFFERO GENERAL PUBLIC LICENSE\n                       Version 3, 19 November 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. &lt;https://fsf.org/&gt;\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU Affero General Public License is a free, copyleft license for\nsoftware and other kinds of works, specifically designed to ensure\ncooperation with the community in the case of network server software.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nour General Public Licenses are intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  Developers that use our General Public Licenses protect your rights\nwith two steps: (1) assert copyright on the software, and (2) offer\nyou this License which gives you legal permission to copy, distribute\nand/or modify the software.\n\n  A secondary benefit of defending all users' freedom is that\nimprovements made in alternate versions of the program, if they\nreceive widespread use, become available for other developers to\nincorporate.  Many developers of free software are heartened and\nencouraged by the resulting cooperation.  However, in the case of\nsoftware used on network servers, this result may fail to come about.\nThe GNU General Public License permits making a modified version and\nletting the public access it on a server without ever releasing its\nsource code to the public.\n\n  The GNU Affero General Public License is designed specifically to\nensure that, in such cases, the modified source code becomes available\nto the community.  It requires the operator of a network server to\nprovide the source code of the modified version running there to the\nusers of that server.  Therefore, public use of a modified version, on\na publicly accessible server, gives the public access to the source\ncode of the modified version.\n\n  An older license, called the Affero General Public License and\npublished by Affero, was designed to accomplish similar goals.  This is\na different license, not a version of the Affero GPL, but Affero has\nreleased a new version of the Affero GPL which permits relicensing under\nthis license.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU Affero General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Remote Network Interaction; Use with the GNU General Public License.\n\n  Notwithstanding any other provision of this License, if you modify the\nProgram, your modified version must prominently offer all users\ninteracting with it remotely through a computer network (if your version\nsupports such interaction) an opportunity to receive the Corresponding\nSource of your version by providing access to the Corresponding Source\nfrom a network server at no charge, through some standard or customary\nmeans of facilitating copying of software.  This Corresponding Source\nshall include the Corresponding Source for any work covered by version 3\nof the GNU General Public License that is incorporated pursuant to the\nfollowing paragraph.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the work with which it is combined will remain governed by version\n3 of the GNU General Public License.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU Affero General Public License from time to time.  Such new versions\nwill be similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU Affero General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU Affero General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU Affero General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    &lt;one line to give the program's name and a brief idea of what it does.&gt;\n    Copyright (C) &lt;year&gt;  &lt;name of author&gt;\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Affero General Public License as published\n    by the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Affero General Public License for more details.\n\n    You should have received a copy of the GNU Affero General Public License\n    along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If your software can interact with users remotely through a computer\nnetwork, you should also make sure that it provides a way for users to\nget its source.  For example, if your program is a web application, its\ninterface could display a \"Source\" link that leads users to an archive\nof the code.  There are many ways you could offer source, and different\nsolutions will be better for different programs; see section 13 for the\nspecific requirements.\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU AGPL, see\n&lt;https://www.gnu.org/licenses/&gt;.\n</code></pre>"},{"location":"guides/analytics/","title":"Graph analytics &amp; data science","text":"<p>Install LynxKite with the graph analytics package:</p> <pre><code>pip install lynxkite lynxkite-graph-analytics\n</code></pre> <p>Run LynxKite in your data directory:</p> <pre><code>cd lynxkite-data\nlynxkite\n</code></pre> <p>LynxKite by default runs on port 8000, so you can access it in your browser at http://localhost:8000. To run it on a different port, set the <code>PORT</code> environment variable (e.g., <code>PORT=8080 lynxkite</code>).</p>"},{"location":"guides/analytics/#using-a-cuda-gpu","title":"Using a CUDA GPU","text":"<p>To make full use of your GPU, install the <code>lynxkite-graph-analytics</code> package with GPU support.</p> <pre><code>pip install lynxkite 'lynxkite-graph-analytics[gpu]'\n</code></pre> <p>And start it with the cuGraph backend for NetworkX:</p> <pre><code>NX_CUGRAPH_AUTOCONFIG=true lynxkite\n</code></pre>"},{"location":"guides/analytics/#directory-browser","title":"Directory browser","text":"<p>When you open the LynxKite web interface, you arrive in the directory browser. You see the files and directories in your data directory \u2014\u00a0if you just created it, it will be empty.</p> <p>You can create workspaces, code files, and folders in the directory browser.</p>"},{"location":"guides/analytics/#workspaces","title":"Workspaces","text":"<p>A LynxKite workspace is the place where you build a data science pipeline. Pipelines are built from boxes, which have inputs and outputs that can be connected to each other.</p> <p>To place a box, click anywhere in the workspace. This opens a search menu where you can find the box you want to add.</p>"},{"location":"guides/analytics/#importing-your-data","title":"Importing your data","text":"<p>To import CSV, Parquet, JSON, and Excel files, you can simply drag and drop them into the LynxKite workspace. This will upload the file to the server and add an \"Import file\" box to the workspace.</p> <p>You can also create \"Import file\" boxes manually and type the path to the file. You can either use an absolute path, or a relative path from the data directory. (Where you started LynxKite.)</p>"},{"location":"guides/analytics/#neural-network-design","title":"Neural network design","text":"<p>The graph analytics package includes two environments, \"LynxKite Graph Analytics\", and \"PyTorch model\". Use the dropdown in the top right corner to switch to the \"PyTorch model\" environment. This environment allows you to define neural network architectures visually.</p> <p>The important parts of a neural network definition are:</p> <ul> <li>Inputs: These boxes stand for the inputs. You will connect them to actual data in the workspace that   uses this model.</li> <li>Layers: The heart of the model. Use the \"Repeat\" box looping back from the output of a layer to the   input of an earlier layer to repeat a set of layers.</li> <li>Outputs: These boxes mark the place in the data flow that holds the predictions of the model.</li> <li>Loss: Build the loss computation after the output box. This part is only used during training.</li> <li>Optimizer: The result of the loss computation goes into the optimizer. Training is partially configured   in the optimizer box, partially in the training box in the workspace that uses the model.</li> </ul> <p>Once the model is defined, you can use it in other workspaces.</p> <ul> <li>Load it with the \"Define model\" box.</li> <li>Train it with the \"Train model\" box.</li> <li>Generate predictions with the \"Model inference\" box.</li> </ul> <p>See the Model definition and Model use workspaces for a practical example.</p>"},{"location":"guides/plugins/","title":"Plugin development","text":"<p>Plugins can provide additional operations for an existing LynxKite environment, and they can also provide new environments.</p>"},{"location":"guides/plugins/#creating-a-new-plugin","title":"Creating a new plugin","text":"<p><code>.py</code> files inside the LynxKite data directory are automatically imported each time a workspace is executed. You can create a new plugin by creating a new <code>.py</code> file in the data directory. LynxKite even includes an integrated editor for this purpose. Click New code file in the directory where you want to create the file.</p> <p>Plugins in subdirectories of the data directory are imported when executing workspaces within those directories. This allows you to create plugins that are only available in specific workspaces.</p> <p>You can also create and distribute plugins as Python packages. In this case the module name must start with <code>lynxkite_</code> for it to be automatically imported on startup.</p>"},{"location":"guides/plugins/#plugin-dependencies","title":"Plugin dependencies","text":"<p>When creating a plugin as a \"code file\", you can create a <code>requirements.txt</code> file in the same directory. This file will be used to install the dependencies of the plugin.</p>"},{"location":"guides/plugins/#adding-new-operations","title":"Adding new operations","text":"<p>Any piece of Python code can easily be wrapped into a LynxKite operation. Let's say we have some code that calculates the length of a string column in a Pandas DataFrame:</p> <pre><code>df[\"length\"] = df[\"my_column\"].str.len()\n</code></pre> <p>We can turn it into a LynxKite operation using the <code>@op</code> decorator:</p> <pre><code>import pandas as pd\nfrom lynxkite_core.ops import op\n\n@op(\"LynxKite Graph Analytics\", \"Get column length\")\ndef get_length(df: pd.DataFrame, *, column_name: str):\n    \"\"\"\n    Gets the length of a string column.\n\n    Args:\n        column_name: The name of the column to get the length of.\n    \"\"\"\n    df = df.copy()\n    df[\"length\"] = df[column_name].str.len()\n    return df\n</code></pre> <p>Let's review the changes we made.</p>"},{"location":"guides/plugins/#the-op-decorator","title":"The <code>@op</code> decorator","text":"<p>The <code>@op</code> decorator registers a function as a LynxKite operation. The first argument is the name of the environment, the last argument is the name of the operation. Between the two, you can list the hierarchy of categories the operation belongs to. For example:</p> <pre><code>@op(\"LynxKite Graph Analytics\", \"Machine learning\", \"Preprocessing\", \"Split train/test set\")\n</code></pre> <p>When defining multiple operations, you can use <code>ops.op_registration</code> for convenience: <pre><code>op = ops.op_registration(\"LynxKite Graph Analytics\")\n\n@op(\"An operation\")\ndef my_op():\n    ...\n</code></pre></p>"},{"location":"guides/plugins/#the-function-signature","title":"The function signature","text":"<p><code>*</code> in the list of function arguments marks the start of keyword-only arguments. The arguments before <code>*</code> will become inputs of the operation. The arguments after <code>*</code> will be its parameters.</p> <pre><code>#              /--- inputs ---\\     /- parameters -\\\ndef get_length(df: pd.DataFrame, *, column_name: str):\n</code></pre> <p>LynxKite uses the type annotations of the function arguments to provide input validation, conversion, and the right UI on the frontend.</p> <p>The types supported for inputs are determined by the environment. For graph analytics, the possibilities are:</p> <ul> <li><code>pandas.DataFrame</code></li> <li><code>networkx.Graph</code></li> <li><code>lynxkite_graph_analytics.Bundle</code></li> </ul> <p>The inputs of an operation are automatically converted to the right type, when possible.</p> <p>To make an input optional, use an optional type, like <code>pd.DataFrame | None</code>.</p> <p>The position of the input and output connectors can be controlled using the <code>@ops.input_position</code> and <code>@ops.output_position</code> decorators. By default, inputs are on the left and outputs on the right.</p> <p>All parameters are stored in LynxKite workspaces as strings. If a type annotation is provided, LynxKite will convert the string to the right type and provide the right UI.</p> <ul> <li><code>str</code>, <code>int</code>, <code>float</code> are presented as a text box and converted to the given type.</li> <li><code>bool</code> is presented as a checkbox.</li> <li><code>lynxkite_core.ops.LongStr</code>   is presented as a text area.</li> <li>Enums are presented as a dropdown list.</li> <li>Pydantic models are presented as their JSON string representations. (Unless you add custom UI   for them.) They are converted to the model object when your function is called.</li> </ul>"},{"location":"guides/plugins/#slow-operations","title":"Slow operations","text":"<p>If the function takes a significant amount of time to run, we must either:</p> <ul> <li>Write an asynchronous function.</li> <li>Pass <code>slow=True</code> to the <code>@op</code> decorator. LynxKite will run the function in a separate thread.</li> </ul> <p><code>slow=True</code> also causes the results of the operation to be cached on disk. As long as its inputs don't change, the operation will not be run again. This is useful for both synchronous and synchronous operations.</p>"},{"location":"guides/plugins/#documentation","title":"Documentation","text":"<p>The docstring of the function is used as the operation's description. You can use Google-style or Numpy-style docstrings. (See Griffe's documentation.)</p> <p>The docstring should be omitted for simple operations like the one above.</p>"},{"location":"guides/plugins/#outputting-results","title":"Outputting results","text":"<p>The return value of the function is the output of the operation. It will be passed to the next operation in the pipeline.</p> <p>An operation can have multiple outputs. In this case, the return value must be a dictionary, and the list of outputs must be declared in the <code>@op</code> decorator.</p> <pre><code>@op(\"LynxKite Graph Analytics\", \"Train/test split\", outputs=[\"train\", \"test\"])\ndef test_split(df: pd.DataFrame, *, test_ratio=0.1):\n    test = df.sample(frac=test_ratio).reset_index()\n    train = df.drop(test.index).reset_index()\n    return {\"train\": train, \"test\": test}\n</code></pre>"},{"location":"guides/plugins/#displaying-results","title":"Displaying results","text":"<p>The outputs of the operation can be used by other operations. But we can also generate results that are meant to be viewed by the user. The different options for this are controlled by the <code>view</code> argument of the <code>@op</code> decorator.</p> <p>The <code>view</code> argument can be one of the following:</p> <ul> <li> <p><code>matplotlib</code>: Just plot something with Matplotlib and it will be displayed in the UI.</p> <pre><code>@op(\"LynxKite Graph Analytics\", \"Plot column histogram\", view=\"matplotlib\")\ndef plot(df: pd.DataFrame, *, column_name: str):\n    df[column_name].value_counts().sort_index().plot.bar()\n</code></pre> </li> <li> <p><code>visualization</code>: Draws a chart using ECharts.   You need to return a dictionary with the chart configuration, which ECharts calls <code>option</code>.</p> <pre><code>@op(\"View loss\", view=\"visualization\")\ndef view_loss(bundle: core.Bundle):\n    loss = bundle.dfs[\"training\"].training_loss.tolist()\n    v = {\n        \"title\": {\"text\": \"Training loss\"},\n        \"xAxis\": {\"type\": \"category\"},\n        \"yAxis\": {\"type\": \"value\"},\n        \"series\": [{\"data\": loss, \"type\": \"line\"}],\n    }\n    return v\n</code></pre> </li> <li> <p><code>image</code>: Return an image as a   data URL   and it will be displayed.</p> </li> <li><code>molecule</code>: Return a molecule as a PDB or SDF string, or an <code>rdkit.Chem.Mol</code> object.   It will be displayed using 3Dmol.js.</li> <li><code>table_view</code>: Return   <code>Bundle.to_dict()</code>.</li> </ul>"},{"location":"guides/plugins/#adding-new-environments","title":"Adding new environments","text":"<p>A new environment means a completely new set of operations, and (optionally) a new executor. There's nothing to be done for setting up a new environment. Just start registering operations into it.</p>"},{"location":"guides/plugins/#no-executor","title":"No executor","text":"<p>By default, the new environment will have no executor. This can be useful!</p> <p>LynxKite workspaces are stored as straightforward JSON files and updated on every modification. You can use LynxKite for configuring workflows and have a separate system read the JSON files.</p> <p>Since the code of the operations is not executed in this case, you can create functions that do nothing. Alternatively, you can use the <code>register_passive_op</code> and <code>passive_op_registration</code> functions to easily whip up a set of operations:</p> <pre><code>from lynxkite_core.ops import passive_op_registration, Parameter as P\n\nop = passive_op_registration(\"My Environment\")\nop('Scrape documents', params=[P('url', '')])\nop('Conversation logs')\nop('Extract graph')\nop('Compute embeddings', params=[P.options('method', ['LLM', 'graph', 'random']), P('dimensions', 1234)])\nop('Vector DB', params=[P.options('backend', ['ANN', 'HNSW'])])\nop('Chat UI', outputs=[])\nop('Chat backend')\n</code></pre>"},{"location":"guides/plugins/#built-in-executors","title":"Built-in executors","text":"<p>LynxKite comes with two built-in executors. You can register these for your environment and you're good to go.</p> <pre><code>from lynxkite_core.executors import simple\nsimple.register(\"My Environment\")\n</code></pre> <p>The <code>simple</code> executor runs each operation once, passing the output of the preceding operation as the input to the next one. No tricks. You can use any types as inputs and outputs.</p> <pre><code>from lynxkite_core.executors import one_by_one\none_by_one.register(\"My Environment\")\n</code></pre> <p>The <code>one_by_one</code> executor expects that the code for operations is the code for transforming a single element. If an operation returns an iterable, it will be split up into its elements, and the next operation is called for each element.</p> <p>Sometimes you need the full contents of an input. The <code>one_by_one</code> executor lets you choose between the two modes by the orientation of the input connector. If the input connector is horizontal (left or right), it takes single elements. If the input connector is vertical (top or bottom), it takes an iterable of all the incoming data.</p> <p>A unique advantage of this setup is that horizontal inputs can have loops across horizontal inputs. Just make sure that loops eventually discard all elements, so you don't end up with an infinite loop.</p>"},{"location":"guides/plugins/#custom-executors","title":"Custom executors","text":"<p>A custom executor can be registered using <code>@ops.register_executor</code>.</p> <pre><code>@ops.register_executor(ENV)\nasync def execute(ws: workspace.Workspace, ctx: workspace.WorkspaceExecutionContext | None):\n    catalog = ops.CATALOGS[ws.env]\n    ...\n</code></pre> <p>The executor must be an asynchronous function that takes a <code>workspace.Workspace</code> as an argument. The return value is ignored and it's up to you how you process the workspace.</p> <p>To update the frontend as the executor processes the workspace, call <code>WorkspaceNode.publish_started</code> when starting to execute a node, and <code>WorkspaceNode.publish_result</code> to publish the results. Use <code>WorkspaceNode.publish_error</code> if the node failed.</p>"},{"location":"guides/quickstart/","title":"Quickstart","text":"<p>Install the LynxKite application with <code>pip</code>: <pre><code>pip install lynxkite\n</code></pre></p> <p>To be able to do anything useful, you also need to install one or more LynxKite environments. If you want to work with data science and graph analytics, install the <code>lynxkite-graph-analytics</code> package: <pre><code>pip install lynxkite-graph-analytics\n</code></pre></p> <p>Create a folder for storing your LynxKite projects: <pre><code>mkdir ~/lynxkite_projects\n</code></pre></p> <p>You're ready to run LynxKite! <pre><code>cd ~/lynxkite_projects\nlynxkite\n</code></pre></p> <p>Open http://localhost:8000/ in your browser.</p> <p>Find example workspaces in the <code>examples</code> folder.</p>"},{"location":"reference/lynxkite-core/ops/","title":"Ops","text":"<p>API for implementing LynxKite operations.</p>"},{"location":"reference/lynxkite-core/ops/#lynxkite_core.ops.LongStr","title":"LongStr  <code>module-attribute</code>","text":"<pre><code>LongStr = Annotated[str, {'format': 'textarea'}]\n</code></pre> <p>LongStr is a string type for parameters that will be displayed as a multiline text area in the UI.</p>"},{"location":"reference/lynxkite-core/ops/#lynxkite_core.ops.Op","title":"Op","text":"<p>               Bases: <code>BaseConfig</code></p>"},{"location":"reference/lynxkite-core/ops/#lynxkite_core.ops.Op.convert_params","title":"convert_params","text":"<pre><code>convert_params(params: dict[str, Any])\n</code></pre> <p>Returns the parameters converted to the expected type.</p>"},{"location":"reference/lynxkite-core/ops/#lynxkite_core.ops.Op.get_input","title":"get_input","text":"<pre><code>get_input(name: str)\n</code></pre> <p>Returns the input with the given name.</p>"},{"location":"reference/lynxkite-core/ops/#lynxkite_core.ops.Op.get_output","title":"get_output","text":"<pre><code>get_output(name: str)\n</code></pre> <p>Returns the output with the given name.</p>"},{"location":"reference/lynxkite-core/ops/#lynxkite_core.ops.Parameter","title":"Parameter","text":"<p>               Bases: <code>BaseConfig</code></p> <p>Defines a parameter for an operation.</p>"},{"location":"reference/lynxkite-core/ops/#lynxkite_core.ops.ParameterGroup","title":"ParameterGroup","text":"<p>               Bases: <code>BaseConfig</code></p> <p>Defines a group of parameters for an operation.</p>"},{"location":"reference/lynxkite-core/ops/#lynxkite_core.ops.Position","title":"Position","text":"<p>               Bases: <code>StrEnum</code></p> <p>Defines the position of an input or output in the UI.</p>"},{"location":"reference/lynxkite-core/ops/#lynxkite_core.ops.Position.from_dir","title":"from_dir  <code>staticmethod</code>","text":"<pre><code>from_dir(dir: str) -&gt; tuple[Position, Position]\n</code></pre> <p>Returns the input and output positions based on the direction.</p>"},{"location":"reference/lynxkite-core/ops/#lynxkite_core.ops.Result","title":"Result  <code>dataclass</code>","text":"<p>Represents the result of an operation.</p> <p>The <code>output</code> attribute is what will be used as input for other operations. The <code>display</code> attribute is used to send data to display on the UI. The value has to be JSON-serializable. <code>input_metadata</code> is a list of JSON objects describing each input.</p>"},{"location":"reference/lynxkite-core/ops/#lynxkite_core.ops.get_optional_type","title":"get_optional_type","text":"<pre><code>get_optional_type(type)\n</code></pre> <p>For a type like <code>int | None</code>, returns <code>int</code>. Returns <code>None</code> otherwise.</p>"},{"location":"reference/lynxkite-core/ops/#lynxkite_core.ops.input_position","title":"input_position","text":"<pre><code>input_position(**positions)\n</code></pre> <p>Decorator for specifying unusual positions for the inputs.</p> <p>Example usage:</p> <pre><code>@input_position(a=\"bottom\", b=\"bottom\")\n@op(\"test\", \"maybe add\")\ndef maybe_add(a: list[int], b: list[int] | None = None):\n    return [a + b for a, b in zip(a, b)] if b else a\n</code></pre>"},{"location":"reference/lynxkite-core/ops/#lynxkite_core.ops.load_user_scripts","title":"load_user_scripts","text":"<pre><code>load_user_scripts(workspace: str)\n</code></pre> <p>Reloads the *.py in the workspace's directory and higher-level directories.</p>"},{"location":"reference/lynxkite-core/ops/#lynxkite_core.ops.make_async","title":"make_async","text":"<pre><code>make_async(func)\n</code></pre> <p>Decorator for slow, blocking operations. Turns them into separate threads.</p>"},{"location":"reference/lynxkite-core/ops/#lynxkite_core.ops.matplotlib_to_image","title":"matplotlib_to_image","text":"<pre><code>matplotlib_to_image(func)\n</code></pre> <p>Decorator for converting a matplotlib figure to an image.</p>"},{"location":"reference/lynxkite-core/ops/#lynxkite_core.ops.op","title":"op","text":"<pre><code>op(env: str | None, *names: str, view: str = 'basic', outputs: list[str] | None = None, params: list[Parameter] | None = None, slow: bool = False, color: str | None = None, cache: bool | None = None, dir: str = 'left-to-right')\n</code></pre> <p>Decorator for defining an operation.</p> PARAMETER DESCRIPTION <code>env</code> <p>The environment (workspace type) to which the operation belongs. If None, the operation  is not registered in any catalog.</p> <p> TYPE: <code>str | None</code> </p> <code>names</code> <p>The list of categories this operation belongs to, followed by the name of the operation.</p> <p> TYPE: <code>str</code> DEFAULT: <code>()</code> </p> <code>view</code> <p>How the operation will be displayed in the UI. One of \"basic\", \"visualization\",   \"table_view\", \"graph_creation_view\", \"image\", \"molecule\", \"matplotlib\", \"service\".</p> <p> TYPE: <code>str</code> DEFAULT: <code>'basic'</code> </p> <code>outputs</code> <p>A list of output names. If not provided, defaults to [\"output\"] for \"basic\" view.</p> <p> TYPE: <code>list[str] | None</code> DEFAULT: <code>None</code> </p> <code>params</code> <p>Normally the parameters are taken from the function signature.     Use \"params\" to override this.</p> <p> TYPE: <code>list[Parameter] | None</code> DEFAULT: <code>None</code> </p> <code>slow</code> <p>If True, the operation results will be cached.   If the function is not async, it will be run in a separate thread.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>color</code> <p>The color of the operation in the UI. Defaults to \"orange\".</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>cache</code> <p>Set to False to disable caching for a slow operation.    You may need this for slow operations with parameters/outputs that can't be serialized.</p> <p> TYPE: <code>bool | None</code> DEFAULT: <code>None</code> </p> <code>dir</code> <p>Sets the default input and output positions. The default is \"left-to-right\", meaning  inputs are on the left and outputs are on the right. Other options are \"right-to-left\",  \"top-to-bottom\", and \"bottom-to-top\".</p> <p> TYPE: <code>str</code> DEFAULT: <code>'left-to-right'</code> </p>"},{"location":"reference/lynxkite-core/ops/#lynxkite_core.ops.op_registration","title":"op_registration","text":"<pre><code>op_registration(env: str, *categories: str, **kwargs)\n</code></pre> <p>Returns a decorator that can be used for registering functions as operations.</p>"},{"location":"reference/lynxkite-core/ops/#lynxkite_core.ops.output_position","title":"output_position","text":"<pre><code>output_position(**positions)\n</code></pre> <p>Decorator for specifying unusual positions for the outputs.</p> <p>Example usage:</p> <pre><code>@output_position(output=\"top\")\n@op(\"test\", \"maybe add\")\ndef maybe_add(a: list[int], b: list[int] | None = None):\n    return [a + b for a, b in zip(a, b)] if b else a\n</code></pre>"},{"location":"reference/lynxkite-core/ops/#lynxkite_core.ops.parse_doc","title":"parse_doc  <code>cached</code>","text":"<pre><code>parse_doc(func)\n</code></pre> <p>Griffe is an optional dependency. When available, we return the parsed docstring.</p>"},{"location":"reference/lynxkite-core/ops/#lynxkite_core.ops.passive_op_registration","title":"passive_op_registration","text":"<pre><code>passive_op_registration(env: str, *categories: str, **kwargs)\n</code></pre> <p>Returns a function that can be used to register operations without associated code.</p>"},{"location":"reference/lynxkite-core/ops/#lynxkite_core.ops.register_executor","title":"register_executor","text":"<pre><code>register_executor(env: str)\n</code></pre> <p>Decorator for registering an executor.</p> <p>The executor is a function that takes a workspace and executes the operations in it. When it starts executing an operation, it should call <code>node.publish_started()</code> to indicate the status on the UI. When the execution is finished, it should call <code>node.publish_result()</code>. This will update the UI with the result of the operation.</p>"},{"location":"reference/lynxkite-core/ops/#lynxkite_core.ops.register_passive_op","title":"register_passive_op","text":"<pre><code>register_passive_op(env: str, *names: str, inputs=[], outputs=['output'], params=[], dir='left-to-right', **kwargs)\n</code></pre> <p>A passive operation has no associated code.</p>"},{"location":"reference/lynxkite-core/workspace/","title":"Workspace","text":"<p>For working with LynxKite workspaces.</p>"},{"location":"reference/lynxkite-core/workspace/#lynxkite_core.workspace.Workspace","title":"Workspace","text":"<p>               Bases: <code>BaseConfig</code></p> <p>A workspace is a representation of a computational graph that consists of nodes and edges.</p> <p>Each node represents an operation or task, and the edges represent the flow of data between the nodes. Each workspace is associated with an environment, which determines the operations that can be performed in the workspace and the execution method for the operations.</p>"},{"location":"reference/lynxkite-core/workspace/#lynxkite_core.workspace.Workspace.add_edge","title":"add_edge","text":"<pre><code>add_edge(source: WorkspaceNode, sourceHandle: str, target: WorkspaceNode, targetHandle: str)\n</code></pre> <p>For convenience in e.g. tests.</p>"},{"location":"reference/lynxkite-core/workspace/#lynxkite_core.workspace.Workspace.add_node","title":"add_node","text":"<pre><code>add_node(func=None, **kwargs)\n</code></pre> <p>For convenience in e.g. tests.</p>"},{"location":"reference/lynxkite-core/workspace/#lynxkite_core.workspace.Workspace.load","title":"load  <code>staticmethod</code>","text":"<pre><code>load(path: str | Path) -&gt; Workspace\n</code></pre> <p>Load a workspace from a file.</p> <p>After loading the workspace, the metadata of the workspace is updated.</p> PARAMETER DESCRIPTION <code>path</code> <p>The path to the file to load the workspace from.</p> <p> TYPE: <code>str | Path</code> </p> RETURNS DESCRIPTION <code>Workspace</code> <p>The loaded workspace object, with updated metadata.</p> <p> TYPE: <code>Workspace</code> </p>"},{"location":"reference/lynxkite-core/workspace/#lynxkite_core.workspace.Workspace.model_dump_json","title":"model_dump_json","text":"<pre><code>model_dump_json() -&gt; str\n</code></pre> <p>Returns the workspace as JSON.</p>"},{"location":"reference/lynxkite-core/workspace/#lynxkite_core.workspace.Workspace.save","title":"save","text":"<pre><code>save(path: str | Path)\n</code></pre> <p>Persist the workspace to a local file in JSON format.</p>"},{"location":"reference/lynxkite-core/workspace/#lynxkite_core.workspace.Workspace.update_metadata","title":"update_metadata","text":"<pre><code>update_metadata()\n</code></pre> <p>Update the metadata of this workspace.</p> <p>The metadata is the information about the operations that the nodes in the workspace represent, like the parameters and their possible values. This information comes from the catalog of operations for the environment of the workspace.</p>"},{"location":"reference/lynxkite-core/workspace/#lynxkite_core.workspace.WorkspaceExecutionContext","title":"WorkspaceExecutionContext  <code>dataclass</code>","text":"<p>Context passed to ops during execution.</p>"},{"location":"reference/lynxkite-core/workspace/#lynxkite_core.workspace.WorkspaceNode","title":"WorkspaceNode","text":"<p>               Bases: <code>BaseConfig</code></p>"},{"location":"reference/lynxkite-core/workspace/#lynxkite_core.workspace.WorkspaceNode.publish_error","title":"publish_error","text":"<pre><code>publish_error(error: Exception | str | None)\n</code></pre> <p>Can be called with None to clear the error state.</p>"},{"location":"reference/lynxkite-core/workspace/#lynxkite_core.workspace.WorkspaceNode.publish_result","title":"publish_result","text":"<pre><code>publish_result(result: Result)\n</code></pre> <p>Sends the result to the frontend. Call this in an executor when the result is available.</p>"},{"location":"reference/lynxkite-core/workspace/#lynxkite_core.workspace.WorkspaceNode.publish_started","title":"publish_started","text":"<pre><code>publish_started()\n</code></pre> <p>Notifies the frontend that work has started on this node.</p>"},{"location":"reference/lynxkite-core/workspace/#lynxkite_core.workspace.WorkspaceNodeData","title":"WorkspaceNodeData","text":"<p>               Bases: <code>BaseConfig</code></p>"},{"location":"reference/lynxkite-core/workspace/#lynxkite_core.workspace.WorkspaceNodeData.fill_op_id_if_missing","title":"fill_op_id_if_missing  <code>classmethod</code>","text":"<pre><code>fill_op_id_if_missing(data: dict) -&gt; dict\n</code></pre> <p>Compatibility with old workspaces that don't have op_id.</p>"},{"location":"reference/lynxkite-core/workspace/#lynxkite_core.workspace.WorkspaceNodeData.ignore_meta","title":"ignore_meta  <code>classmethod</code>","text":"<pre><code>ignore_meta(data: dict) -&gt; dict\n</code></pre> <p>Metadata is never loaded. We will use fresh metadata.</p>"},{"location":"reference/lynxkite-core/executors/one_by_one/","title":"One by one","text":"<p>A LynxKite executor that assumes most operations operate on their input one by one.</p>"},{"location":"reference/lynxkite-core/executors/one_by_one/#lynxkite_core.executors.one_by_one.Context","title":"Context","text":"<p>               Bases: <code>BaseConfig</code></p> <p>Passed to operation functions as \"_ctx\" if they have such a parameter.</p> ATTRIBUTE DESCRIPTION <code>node</code> <p>The workspace node that this context is associated with.</p> <p> TYPE: <code>WorkspaceNode</code> </p> <code>last_result</code> <p>The last result produced by the operation. This can be used to incrementally build a result, when the operation is executed for multiple items.</p> <p> TYPE: <code>Any</code> </p>"},{"location":"reference/lynxkite-core/executors/one_by_one/#lynxkite_core.executors.one_by_one.mount_gradio","title":"mount_gradio  <code>async</code>","text":"<pre><code>mount_gradio(app, gradio_app, path: str)\n</code></pre> <p>Mounts a Gradio app onto a Starlette/FastAPI app at the given path.</p>"},{"location":"reference/lynxkite-core/executors/one_by_one/#lynxkite_core.executors.one_by_one.register","title":"register","text":"<pre><code>register(env: str, cache: bool = True)\n</code></pre> <p>Registers the one-by-one executor.</p> <p>Usage:</p> <pre><code>from lynxkite_core.executors import one_by_one\none_by_one.register(\"My Environment\")\n</code></pre>"},{"location":"reference/lynxkite-core/executors/simple/","title":"Simple","text":"<p>A LynxKite executor that simply passes the output of one box to the other.</p>"},{"location":"reference/lynxkite-core/executors/simple/#lynxkite_core.executors.simple.register","title":"register","text":"<pre><code>register(env: str)\n</code></pre> <p>Registers the simple executor.</p> <p>Usage:</p> <pre><code>from lynxkite_core.executors import simple\nsimple.register(\"My Environment\")\n</code></pre>"},{"location":"reference/lynxkite-graph-analytics/core/","title":"Core","text":"<p>Graph analytics executor and data types.</p>"},{"location":"reference/lynxkite-graph-analytics/core/#lynxkite_graph_analytics.core.ColumnNameByTableName","title":"ColumnNameByTableName  <code>module-attribute</code>","text":"<pre><code>ColumnNameByTableName = Annotated[str, {'format': 'dropdown', 'metadata_query': '[].dataframes[].&lt;table_name&gt;.columns[]'}]\n</code></pre> <p>A type annotation to be used for parameters of an operation. ColumnNameByTableName is rendered as a dropdown in the frontend, listing the columns of the DataFrame named by the \"table_name\" parameter. The column name is passed to the operation as a string.</p>"},{"location":"reference/lynxkite-graph-analytics/core/#lynxkite_graph_analytics.core.EdgePropertyName","title":"EdgePropertyName  <code>module-attribute</code>","text":"<pre><code>EdgePropertyName = Annotated[str, {'format': 'dropdown', 'metadata_query': '[].dataframes[].edges[].columns[]'}]\n</code></pre> <p>A type annotation to be used for parameters of an operation. EdgePropertyName is rendered as a dropdown in the frontend, listing the columns of the \"edges\" DataFrame. The column name is passed to the operation as a string.</p>"},{"location":"reference/lynxkite-graph-analytics/core/#lynxkite_graph_analytics.core.NodePropertyName","title":"NodePropertyName  <code>module-attribute</code>","text":"<pre><code>NodePropertyName = Annotated[str, {'format': 'dropdown', 'metadata_query': '[].dataframes[].nodes[].columns[]'}]\n</code></pre> <p>A type annotation to be used for parameters of an operation. NodePropertyName is rendered as a dropdown in the frontend, listing the columns of the \"nodes\" DataFrame. The column name is passed to the operation as a string.</p>"},{"location":"reference/lynxkite-graph-analytics/core/#lynxkite_graph_analytics.core.OtherName","title":"OtherName  <code>module-attribute</code>","text":"<pre><code>OtherName = Annotated[str, {'format': 'dropdown', 'metadata_query': '[].other.keys(@)[]'}]\n</code></pre> <p>A type annotation to be used for parameters of an operation. OtherName is rendered as a dropdown in the frontend, listing the keys on the \"other\" part of the Bundle. The key is passed to the operation as a string.</p>"},{"location":"reference/lynxkite-graph-analytics/core/#lynxkite_graph_analytics.core.TableName","title":"TableName  <code>module-attribute</code>","text":"<pre><code>TableName = Annotated[str, {'format': 'dropdown', 'metadata_query': '[].dataframes[].keys(@)[]'}]\n</code></pre> <p>A type annotation to be used for parameters of an operation. TableName is rendered as a dropdown in the frontend, listing all DataFrames in the Bundle. The table name is passed to the operation as a string.</p>"},{"location":"reference/lynxkite-graph-analytics/core/#lynxkite_graph_analytics.core.Bundle","title":"Bundle  <code>dataclass</code>","text":"<p>A collection of DataFrames and other data.</p> <p>Can efficiently represent a knowledge graph (homogeneous or heterogeneous) or tabular data.</p> <p>By convention, if it contains a single DataFrame, it is called <code>df</code>. If it contains a homogeneous graph, it is represented as two DataFrames called <code>nodes</code> and <code>edges</code>.</p> ATTRIBUTE DESCRIPTION <code>dfs</code> <p>Named DataFrames.</p> <p> TYPE: <code>dict[str, DataFrame]</code> </p> <code>relations</code> <p>Metadata that describes the roles of each DataFrame. Can be empty, if the bundle is just one or more DataFrames.</p> <p> TYPE: <code>list[RelationDefinition]</code> </p> <code>other</code> <p>Other data, such as a trained model.</p> <p> TYPE: <code>dict[str, Any]</code> </p>"},{"location":"reference/lynxkite-graph-analytics/core/#lynxkite_graph_analytics.core.Bundle.copy","title":"copy","text":"<pre><code>copy()\n</code></pre> <p>Returns a shallow copy of the bundle. The Bundle and its containers are new, but the DataFrames and RelationDefinitions are shared. (The contents of <code>other</code> are also shared.)</p>"},{"location":"reference/lynxkite-graph-analytics/core/#lynxkite_graph_analytics.core.Bundle.metadata","title":"metadata","text":"<pre><code>metadata()\n</code></pre> <p>JSON-serializable information about the bundle, metadata only.</p>"},{"location":"reference/lynxkite-graph-analytics/core/#lynxkite_graph_analytics.core.Bundle.to_dict","title":"to_dict","text":"<pre><code>to_dict(limit: int = 100)\n</code></pre> <p>JSON-serializable representation of the bundle, including some data.</p>"},{"location":"reference/lynxkite-graph-analytics/core/#lynxkite_graph_analytics.core.RelationDefinition","title":"RelationDefinition  <code>dataclass</code>","text":"<p>Defines a set of edges.</p> ATTRIBUTE DESCRIPTION <code>df</code> <p>The name of the DataFrame that contains the edges.</p> <p> TYPE: <code>str</code> </p> <code>source_column</code> <p>The column in the edge DataFrame that contains the source node ID.</p> <p> TYPE: <code>str</code> </p> <code>target_column</code> <p>The column in the edge DataFrame that contains the target node ID.</p> <p> TYPE: <code>str</code> </p> <code>source_table</code> <p>The name of the DataFrame that contains the source nodes.</p> <p> TYPE: <code>str</code> </p> <code>target_table</code> <p>The name of the DataFrame that contains the target nodes.</p> <p> TYPE: <code>str</code> </p> <code>source_key</code> <p>The column in the source table that contains the node ID.</p> <p> TYPE: <code>str</code> </p> <code>target_key</code> <p>The column in the target table that contains the node ID.</p> <p> TYPE: <code>str</code> </p> <code>name</code> <p>Descriptive name for the relation.</p> <p> TYPE: <code>str | None</code> </p>"},{"location":"reference/lynxkite-graph-analytics/core/#lynxkite_graph_analytics.core.Service","title":"Service","text":"<p>               Bases: <code>Protocol</code></p>"},{"location":"reference/lynxkite-graph-analytics/core/#lynxkite_graph_analytics.core.Service.get","title":"get  <code>async</code>","text":"<pre><code>get(request: Request) -&gt; dict\n</code></pre> <p>Handles a GET request. The unparsed part of the URL is available as request.state.remaining_path.</p>"},{"location":"reference/lynxkite-graph-analytics/core/#lynxkite_graph_analytics.core.Service.post","title":"post  <code>async</code>","text":"<pre><code>post(request: Request) -&gt; dict\n</code></pre> <p>Handles a POST request. The unparsed part of the URL is available as request.state.remaining_path.</p>"},{"location":"reference/lynxkite-graph-analytics/core/#lynxkite_graph_analytics.core.api_service_get","title":"api_service_get  <code>async</code>","text":"<pre><code>api_service_get(request)\n</code></pre> <p>Boxes can expose HTTP endpoints.</p> Example <p>... class ChatBackend:   def get(self, request: fastapi.Request):     return f\"Hello from {request.state.remaining_path}\"   def post(self, request: fastapi.Request):     print(\"POST received for\", request.state.remaining_path) @op(\"Chat backend\", outputs=[], view=\"service\") def chat_backend(input: Bundle):     return ChatBackend()</p> <p>curl ${LYNXKITE_URL}/api/service/lynxkite_graph_analytics/Example.lynxkite.json/Chat%20backend%201/models</p>"},{"location":"reference/lynxkite-graph-analytics/core/#lynxkite_graph_analytics.core.df_for_frontend","title":"df_for_frontend","text":"<pre><code>df_for_frontend(df: DataFrame, limit: int) -&gt; DataFrame\n</code></pre> <p>Returns a DataFrame with values that are safe to send to the frontend.</p>"},{"location":"reference/lynxkite-graph-analytics/core/#lynxkite_graph_analytics.core.disambiguate_edges","title":"disambiguate_edges","text":"<pre><code>disambiguate_edges(ws: Workspace)\n</code></pre> <p>If an input plug is connected to multiple edges, keep only the last edge.</p>"},{"location":"reference/lynxkite-graph-analytics/core/#lynxkite_graph_analytics.core.nx_node_attribute_func","title":"nx_node_attribute_func","text":"<pre><code>nx_node_attribute_func(name)\n</code></pre> <p>Decorator for wrapping a function that adds a NetworkX node attribute.</p>"},{"location":"reference/lynxkite-graph-analytics/operations/","title":"Operations","text":"<p>Graph analytics operations.</p> <p>Operations for machine learning.</p> <p>Automatically wraps all NetworkX functions as LynxKite operations.</p>"},{"location":"reference/lynxkite-graph-analytics/operations/#lynxkite_graph_analytics.lynxkite_ops.cypher","title":"cypher","text":"<pre><code>cypher(bundle: Bundle, *, query: LongStr, save_as: str = 'result')\n</code></pre> <p>Run a Cypher query on the graph in the bundle. Save the results as a new DataFrame.</p>"},{"location":"reference/lynxkite-graph-analytics/operations/#lynxkite_graph_analytics.lynxkite_ops.export_to_file","title":"export_to_file","text":"<pre><code>export_to_file(bundle: Bundle, *, table_name: str, filename: str, file_format: FileFormat = csv)\n</code></pre> <p>Exports a DataFrame to a file.</p> PARAMETER DESCRIPTION <code>bundle</code> <p>The bundle containing the DataFrame to export.</p> <p> TYPE: <code>Bundle</code> </p> <code>table_name</code> <p>The name of the DataFrame in the bundle to export.</p> <p> TYPE: <code>str</code> </p> <code>filename</code> <p>The name of the file to export to.</p> <p> TYPE: <code>str</code> </p> <code>file_format</code> <p>The format of the file to export to. Defaults to CSV.</p> <p> TYPE: <code>FileFormat</code> DEFAULT: <code>csv</code> </p>"},{"location":"reference/lynxkite-graph-analytics/operations/#lynxkite_graph_analytics.lynxkite_ops.import_csv","title":"import_csv","text":"<pre><code>import_csv(*, filename: str, columns: str = '&lt;from file&gt;', separator: str = '&lt;auto&gt;')\n</code></pre> <p>Imports a CSV file.</p>"},{"location":"reference/lynxkite-graph-analytics/operations/#lynxkite_graph_analytics.lynxkite_ops.import_file","title":"import_file","text":"<pre><code>import_file(*, file_path: str, table_name: str, file_format: FileFormat = csv, **kwargs) -&gt; Bundle\n</code></pre> <p>Read the contents of the a file into a <code>Bundle</code>.</p> PARAMETER DESCRIPTION <code>file_path</code> <p>Path to the file to import.</p> <p> TYPE: <code>str</code> </p> <code>table_name</code> <p>Name to use for identifying the table in the bundle.</p> <p> TYPE: <code>str</code> </p> <code>file_format</code> <p>Format of the file. Has to be one of the values in the <code>FileFormat</code> enum.</p> <p> TYPE: <code>FileFormat</code> DEFAULT: <code>csv</code> </p> RETURNS DESCRIPTION <code>Bundle</code> <p>Bundle with a single table with the contents of the file.</p> <p> TYPE: <code>Bundle</code> </p>"},{"location":"reference/lynxkite-graph-analytics/operations/#lynxkite_graph_analytics.lynxkite_ops.import_graphml","title":"import_graphml","text":"<pre><code>import_graphml(*, filename: str)\n</code></pre> <p>Imports a GraphML file.</p>"},{"location":"reference/lynxkite-graph-analytics/operations/#lynxkite_graph_analytics.lynxkite_ops.import_parquet","title":"import_parquet","text":"<pre><code>import_parquet(*, filename: str)\n</code></pre> <p>Imports a Parquet file.</p>"},{"location":"reference/lynxkite-graph-analytics/operations/#lynxkite_graph_analytics.lynxkite_ops.organize","title":"organize","text":"<pre><code>organize(bundles: list[Bundle], *, relations: str = '')\n</code></pre> <p>Merge multiple inputs and construct graphs from the tables.</p> <p>To create a graph, import tables for edges and nodes, and combine them in this operation.</p>"},{"location":"reference/lynxkite-graph-analytics/operations/#lynxkite_graph_analytics.lynxkite_ops.sample_graph","title":"sample_graph","text":"<pre><code>sample_graph(graph: Graph, *, nodes: int = 100)\n</code></pre> <p>Takes a (preferably connected) subgraph.</p>"},{"location":"reference/lynxkite-graph-analytics/operations/#lynxkite_graph_analytics.lynxkite_ops.sql","title":"sql","text":"<pre><code>sql(bundle: Bundle, *, query: LongStr, save_as: str = 'result')\n</code></pre> <p>Run a SQL query on the DataFrames in the bundle. Save the results as a new DataFrame.</p>"},{"location":"reference/lynxkite-graph-analytics/operations/#lynxkite_graph_analytics.ml_ops.define_model","title":"define_model","text":"<pre><code>define_model(bundle: Bundle, *, model_workspace: str, save_as: str = 'model')\n</code></pre> <p>Trains the selected model on the selected dataset. Most training parameters are set in the model definition.</p>"},{"location":"reference/lynxkite-graph-analytics/operations/#lynxkite_graph_analytics.ml_ops.model_inference","title":"model_inference","text":"<pre><code>model_inference(bundle: Bundle, *, model_name: PyTorchModelName = 'model', input_mapping: ModelInferenceInputMapping | None, output_mapping: ModelOutputMapping | None, batch_size: int = 1)\n</code></pre> <p>Executes a trained model.</p>"},{"location":"reference/lynxkite-graph-analytics/operations/#lynxkite_graph_analytics.ml_ops.train_model","title":"train_model","text":"<pre><code>train_model(bundle: Bundle, *, model_name: PyTorchModelName = 'model', input_mapping: ModelTrainingInputMapping | None, epochs: int = 1, batch_size: int = 1)\n</code></pre> <p>Trains the selected model on the selected dataset. Training parameters specific to the model are set in the model definition, while parameters specific to the hardware environment and dataset are set here.</p>"},{"location":"reference/lynxkite-graph-analytics/operations/#lynxkite_graph_analytics.ml_ops.train_test_split","title":"train_test_split","text":"<pre><code>train_test_split(bundle: Bundle, *, table_name: TableName, test_ratio: float = 0.1, seed=1234)\n</code></pre> <p>Splits a dataframe in the bundle into separate \"_train\" and \"_test\" dataframes.</p>"}]}